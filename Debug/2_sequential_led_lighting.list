
2_sequential_led_lighting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013e8  080013e8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080013e8  080013e8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013e8  080013e8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  08001408  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001408  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003564  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000feb  00000000  00000000  000235e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  000245d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e3  00000000  00000000  000249d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011aee  00000000  00000000  00024cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ee1  00000000  00000000  000367a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e037  00000000  00000000  0003b68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ca8  00000000  00000000  000a96c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000aa36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001390 	.word	0x08001390

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08001390 	.word	0x08001390

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Falling_Callback>:
        0x7f,  // 8
        0x67   // 9
};

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]

  UNUSED(GPIO_Pin);
    if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_Pin)
 800022c:	2380      	movs	r3, #128	; 0x80
 800022e:	019b      	lsls	r3, r3, #6
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8000232:	0019      	movs	r1, r3
 8000234:	0010      	movs	r0, r2
 8000236:	f000 fce3 	bl	8000c00 <HAL_GPIO_ReadPin>
 800023a:	0003      	movs	r3, r0
 800023c:	b29b      	uxth	r3, r3
 800023e:	1dba      	adds	r2, r7, #6
 8000240:	8812      	ldrh	r2, [r2, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d102      	bne.n	800024c <HAL_GPIO_EXTI_Falling_Callback+0x2c>
    {
    		button_State = 1;
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]

    }



}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	50000800 	.word	0x50000800
 8000258:	20000034 	.word	0x20000034

0800025c <ORDER_UPDATE>:
void ORDER_UPDATE(uint8_t number){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, ((number>>0)&0x01));
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2201      	movs	r2, #1
 800026e:	4013      	ands	r3, r2
 8000270:	b2da      	uxtb	r2, r3
 8000272:	23a0      	movs	r3, #160	; 0xa0
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2101      	movs	r1, #1
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fcde 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, ((number>>1)&0x01));
 800027e:	1dfb      	adds	r3, r7, #7
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	085b      	lsrs	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2201      	movs	r2, #1
 8000288:	4013      	ands	r3, r2
 800028a:	b2da      	uxtb	r2, r3
 800028c:	23a0      	movs	r3, #160	; 0xa0
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2102      	movs	r1, #2
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fcd1 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, ((number>>2)&0x01));
 8000298:	1dfb      	adds	r3, r7, #7
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	089b      	lsrs	r3, r3, #2
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2201      	movs	r2, #1
 80002a2:	4013      	ands	r3, r2
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	23a0      	movs	r3, #160	; 0xa0
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2104      	movs	r1, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fcc4 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, ((number>>3)&0x01));
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	08db      	lsrs	r3, r3, #3
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2201      	movs	r2, #1
 80002bc:	4013      	ands	r3, r2
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	23a0      	movs	r3, #160	; 0xa0
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2108      	movs	r1, #8
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fcb7 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((number>>4)&0x01));
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	091b      	lsrs	r3, r3, #4
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2201      	movs	r2, #1
 80002d6:	4013      	ands	r3, r2
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	23a0      	movs	r3, #160	; 0xa0
 80002dc:	05db      	lsls	r3, r3, #23
 80002de:	2110      	movs	r1, #16
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fcaa 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ((number>>5)&0x01));
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	095b      	lsrs	r3, r3, #5
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2201      	movs	r2, #1
 80002f0:	4013      	ands	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	23a0      	movs	r3, #160	; 0xa0
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2120      	movs	r1, #32
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fc9d 	bl	8000c3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ((number>>6)&0x01));
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	099b      	lsrs	r3, r3, #6
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2201      	movs	r2, #1
 800030a:	4013      	ands	r3, r2
 800030c:	b2da      	uxtb	r2, r3
 800030e:	23a0      	movs	r3, #160	; 0xa0
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	2140      	movs	r1, #64	; 0x40
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fc90 	bl	8000c3a <HAL_GPIO_WritePin>
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b002      	add	sp, #8
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <main>:

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

  HAL_Init();
 8000328:	f000 f979 	bl	800061e <HAL_Init>


  SystemClock_Config();
 800032c:	f000 f83a 	bl	80003a4 <SystemClock_Config>


  MX_GPIO_Init();
 8000330:	f000 f87c 	bl	800042c <MX_GPIO_Init>

  while (1)
  {
	  	  if(button_State == 1)
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <main+0x74>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d111      	bne.n	8000360 <main+0x3c>
	  	  {
	  		  if(number == 9)
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <main+0x78>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b09      	cmp	r3, #9
 8000342:	d103      	bne.n	800034c <main+0x28>
	  		  {
	  			  number = 0;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <main+0x78>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	e005      	b.n	8000358 <main+0x34>
	  		  }
	  		  else
	  		  {
	  			  number++;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <main+0x78>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <main+0x78>)
 8000356:	701a      	strb	r2, [r3, #0]
	  		  }
	  		button_State = 0;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <main+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e00d      	b.n	800037c <main+0x58>
	  	  }
	  	  else if(number == 0)
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <main+0x78>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d103      	bne.n	8000370 <main+0x4c>
	  	  {
	  		  number = 9;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <main+0x78>)
 800036a:	2209      	movs	r2, #9
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	e005      	b.n	800037c <main+0x58>
	  	  }
	  	  else
	  	  {
	  		  number --;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <main+0x78>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	b2da      	uxtb	r2, r3
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <main+0x78>)
 800037a:	701a      	strb	r2, [r3, #0]
	  	  }
	  	ORDER_UPDATE(ledorder[number]);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <main+0x78>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	001a      	movs	r2, r3
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <main+0x7c>)
 8000384:	5c9b      	ldrb	r3, [r3, r2]
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff ff68 	bl	800025c <ORDER_UPDATE>
	  		  HAL_Delay(500);
 800038c:	23fa      	movs	r3, #250	; 0xfa
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	0018      	movs	r0, r3
 8000392:	f000 f9c1 	bl	8000718 <HAL_Delay>
	  	  if(button_State == 1)
 8000396:	e7cd      	b.n	8000334 <main+0x10>
 8000398:	20000034 	.word	0x20000034
 800039c:	20000035 	.word	0x20000035
 80003a0:	20000000 	.word	0x20000000

080003a4 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b08d      	sub	sp, #52	; 0x34
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	2414      	movs	r4, #20
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	231c      	movs	r3, #28
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f000 ffbf 	bl	8001338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	003b      	movs	r3, r7
 80003bc:	0018      	movs	r0, r3
 80003be:	2314      	movs	r3, #20
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f000 ffb8 	bl	8001338 <memset>


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	2202      	movs	r2, #2
 80003cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2240      	movs	r2, #64	; 0x40
 80003e0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fc79 	bl	8000cdc <HAL_RCC_OscConfig>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003ee:	f000 f895 	bl	800051c <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	003b      	movs	r3, r7
 80003f4:	2207      	movs	r2, #7
 80003f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	003b      	movs	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000410:	003b      	movs	r3, r7
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fe45 	bl	80010a4 <HAL_RCC_ClockConfig>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800041e:	f000 f87d 	bl	800051c <Error_Handler>
  }
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b00d      	add	sp, #52	; 0x34
 8000428:	bd90      	pop	{r4, r7, pc}
	...

0800042c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	2414      	movs	r4, #20
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f000 ff7b 	bl	8001338 <memset>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000448:	2104      	movs	r1, #4
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	; 0x34
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000452:	2204      	movs	r2, #4
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_GPIO_Init+0xe4>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045e:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000460:	2120      	movs	r1, #32
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	; 0x34
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046a:	2220      	movs	r2, #32
 800046c:	4013      	ands	r3, r2
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_GPIO_Init+0xe4>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000490:	2102      	movs	r1, #2
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_GPIO_Init+0xe4>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049a:	2202      	movs	r2, #2
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2200      	movs	r2, #0
 80004a8:	217f      	movs	r1, #127	; 0x7f
 80004aa:	0018      	movs	r0, r3
 80004ac:	f000 fbc5 	bl	8000c3a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);


  GPIO_InitStruct.Pin = User_Button_Pin;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	0192      	lsls	r2, r2, #6
 80004b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <MX_GPIO_Init+0xe8>)
 80004bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <MX_GPIO_Init+0xec>)
 80004c8:	0019      	movs	r1, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	f000 fa26 	bl	800091c <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	227f      	movs	r2, #127	; 0x7f
 80004d6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fa12 	bl	800091c <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	2007      	movs	r0, #7
 80004fe:	f000 f9db 	bl	80008b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000502:	2007      	movs	r0, #7
 8000504:	f000 f9ed 	bl	80008e2 <HAL_NVIC_EnableIRQ>


}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b00b      	add	sp, #44	; 0x2c
 800050e:	bd90      	pop	{r4, r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	10110000 	.word	0x10110000
 8000518:	50000800 	.word	0x50000800

0800051c <Error_Handler>:


void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			; (mov r8, r8)

  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	641a      	str	r2, [r3, #64]	; 0x40
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	2201      	movs	r2, #1
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0549      	lsls	r1, r1, #21
 8000550:	430a      	orrs	r2, r1
 8000552:	63da      	str	r2, [r3, #60]	; 0x3c
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_MspInit+0x44>)
 8000556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	055b      	lsls	r3, r3, #21
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 f8a4 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	019b      	lsls	r3, r3, #6
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fb64 	bl	8000c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <SystemInit+0x14>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0512      	lsls	r2, r2, #20
 80005be:	609a      	str	r2, [r3, #8]
#endif
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d0:	f7ff fff0 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <LoopForever+0xa>)
  ldr r3, =_edata
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <LoopForever+0xe>)
  adds r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopForever+0x12>)
  b LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  str  r3, [r2]
 80005f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f2:	3204      	adds	r2, #4

080005f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LoopForever+0x16>)
  cmp r2, r3
 80005f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005fa:	f000 fea5 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fe91 	bl	8000324 <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000608:	080013f0 	.word	0x080013f0
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000610:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000614:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000618:	2000003c 	.word	0x2000003c

0800061c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_IRQHandler>

0800061e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062a:	2003      	movs	r0, #3
 800062c:	f000 f80e 	bl	800064c <HAL_InitTick>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d003      	beq.n	800063c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e001      	b.n	8000640 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800063c:	f7ff ff74 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000654:	230f      	movs	r3, #15
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <HAL_InitTick+0x88>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d02b      	beq.n	80006bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <HAL_InitTick+0x8c>)
 8000666:	681c      	ldr	r4, [r3, #0]
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <HAL_InitTick+0x88>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	0019      	movs	r1, r3
 800066e:	23fa      	movs	r3, #250	; 0xfa
 8000670:	0098      	lsls	r0, r3, #2
 8000672:	f7ff fd49 	bl	8000108 <__udivsi3>
 8000676:	0003      	movs	r3, r0
 8000678:	0019      	movs	r1, r3
 800067a:	0020      	movs	r0, r4
 800067c:	f7ff fd44 	bl	8000108 <__udivsi3>
 8000680:	0003      	movs	r3, r0
 8000682:	0018      	movs	r0, r3
 8000684:	f000 f93d 	bl	8000902 <HAL_SYSTICK_Config>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d112      	bne.n	80006b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d80a      	bhi.n	80006a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	2301      	movs	r3, #1
 8000696:	425b      	negs	r3, r3
 8000698:	2200      	movs	r2, #0
 800069a:	0018      	movs	r0, r3
 800069c:	f000 f90c 	bl	80008b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_InitTick+0x90>)
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	e00d      	b.n	80006c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a8:	230f      	movs	r3, #15
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e008      	b.n	80006c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006b2:	230f      	movs	r3, #15
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e003      	b.n	80006c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006bc:	230f      	movs	r3, #15
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c4:	230f      	movs	r3, #15
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	781b      	ldrb	r3, [r3, #0]
}
 80006ca:	0018      	movs	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b005      	add	sp, #20
 80006d0:	bd90      	pop	{r4, r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	20000014 	.word	0x20000014
 80006d8:	2000000c 	.word	0x2000000c
 80006dc:	20000010 	.word	0x20000010

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	18d2      	adds	r2, r2, r3
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	20000014 	.word	0x20000014
 8000700:	20000038 	.word	0x20000038

08000704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000038 	.word	0x20000038

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff0 	bl	8000704 <HAL_GetTick>
 8000724:	0003      	movs	r3, r0
 8000726:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_Delay+0x44>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	001a      	movs	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	189b      	adds	r3, r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	f7ff ffe0 	bl	8000704 <HAL_GetTick>
 8000744:	0002      	movs	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b004      	add	sp, #16
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000014 	.word	0x20000014

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b7f      	cmp	r3, #127	; 0x7f
 8000772:	d809      	bhi.n	8000788 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	231f      	movs	r3, #31
 800077c:	401a      	ands	r2, r3
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__NVIC_EnableIRQ+0x30>)
 8000780:	2101      	movs	r1, #1
 8000782:	4091      	lsls	r1, r2
 8000784:	000a      	movs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b7f      	cmp	r3, #127	; 0x7f
 80007a8:	d828      	bhi.n	80007fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	33c0      	adds	r3, #192	; 0xc0
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	589b      	ldr	r3, [r3, r2]
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	2203      	movs	r2, #3
 80007c2:	400a      	ands	r2, r1
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	401a      	ands	r2, r3
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	2303      	movs	r3, #3
 80007e2:	4003      	ands	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	33c0      	adds	r3, #192	; 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fa:	e031      	b.n	8000860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0019      	movs	r1, r3
 8000804:	230f      	movs	r3, #15
 8000806:	400b      	ands	r3, r1
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	3306      	adds	r3, #6
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	3304      	adds	r3, #4
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <__NVIC_SetPriority+0xd8>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001c      	movs	r4, r3
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	3b08      	subs	r3, #8
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	3306      	adds	r3, #6
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	18c3      	adds	r3, r0, r3
 800085c:	3304      	adds	r3, #4
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b003      	add	sp, #12
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	045b      	lsls	r3, r3, #17
 8000880:	429a      	cmp	r2, r3
 8000882:	d301      	bcc.n	8000888 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000884:	2301      	movs	r3, #1
 8000886:	e010      	b.n	80008aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <SysTick_Config+0x44>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	3a01      	subs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2103      	movs	r1, #3
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ff7c 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x44>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	210f      	movs	r1, #15
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	1c02      	adds	r2, r0, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ff5d 	bl	8000794 <__NVIC_SetPriority>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	0002      	movs	r2, r0
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff33 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ffaf 	bl	8000870 <SysTick_Config>
 8000912:	0003      	movs	r3, r0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800092a:	e153      	b.n	8000bd4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4091      	lsls	r1, r2
 8000936:	000a      	movs	r2, r1
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d100      	bne.n	8000944 <HAL_GPIO_Init+0x28>
 8000942:	e144      	b.n	8000bce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d003      	beq.n	8000954 <HAL_GPIO_Init+0x38>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b12      	cmp	r3, #18
 8000952:	d125      	bne.n	80009a0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	08da      	lsrs	r2, r3, #3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3208      	adds	r2, #8
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	58d3      	ldr	r3, [r2, r3]
 8000960:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	2207      	movs	r2, #7
 8000966:	4013      	ands	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	220f      	movs	r2, #15
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4013      	ands	r3, r2
 8000976:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	220f      	movs	r2, #15
 800097e:	401a      	ands	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	2107      	movs	r1, #7
 8000984:	400b      	ands	r3, r1
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	409a      	lsls	r2, r3
 800098a:	0013      	movs	r3, r2
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	4313      	orrs	r3, r2
 8000990:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	08da      	lsrs	r2, r3, #3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3208      	adds	r2, #8
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	6979      	ldr	r1, [r7, #20]
 800099e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	43da      	mvns	r2, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	4013      	ands	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	401a      	ands	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00b      	beq.n	80009f4 <HAL_GPIO_Init+0xd8>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	43da      	mvns	r2, r3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	4013      	ands	r3, r2
 8000a38:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	2201      	movs	r2, #1
 8000a42:	401a      	ands	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d017      	beq.n	8000a8e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	4013      	ands	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	055b      	lsls	r3, r3, #21
 8000a96:	4013      	ands	r3, r2
 8000a98:	d100      	bne.n	8000a9c <HAL_GPIO_Init+0x180>
 8000a9a:	e098      	b.n	8000bce <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000a9c:	4a53      	ldr	r2, [pc, #332]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3318      	adds	r3, #24
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	589b      	ldr	r3, [r3, r2]
 8000aa8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	43da      	mvns	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d019      	beq.n	8000afe <HAL_GPIO_Init+0x1e2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_GPIO_Init+0x2d4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0x1de>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_GPIO_Init+0x2d8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d00d      	beq.n	8000af6 <HAL_GPIO_Init+0x1da>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <HAL_GPIO_Init+0x2dc>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d007      	beq.n	8000af2 <HAL_GPIO_Init+0x1d6>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <HAL_GPIO_Init+0x2e0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_GPIO_Init+0x1d2>
 8000aea:	2305      	movs	r3, #5
 8000aec:	e008      	b.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000aee:	2306      	movs	r3, #6
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e004      	b.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000af6:	2302      	movs	r3, #2
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x1e4>
 8000afe:	2300      	movs	r3, #0
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	2103      	movs	r1, #3
 8000b04:	400a      	ands	r2, r1
 8000b06:	00d2      	lsls	r2, r2, #3
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b10:	4936      	ldr	r1, [pc, #216]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3318      	adds	r3, #24
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	58d3      	ldr	r3, [r2, r3]
 8000b24:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	025b      	lsls	r3, r3, #9
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b44:	4929      	ldr	r1, [pc, #164]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b4c:	4a27      	ldr	r2, [pc, #156]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b4e:	2384      	movs	r3, #132	; 0x84
 8000b50:	58d3      	ldr	r3, [r2, r3]
 8000b52:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43da      	mvns	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	029b      	lsls	r3, r3, #10
 8000b66:	4013      	ands	r3, r2
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000b72:	491e      	ldr	r1, [pc, #120]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b74:	2284      	movs	r2, #132	; 0x84
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43da      	mvns	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4013      	ands	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	035b      	lsls	r3, r3, #13
 8000b92:	4013      	ands	r3, r2
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43da      	mvns	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	039b      	lsls	r3, r3, #14
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_GPIO_Init+0x2d0>)
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	40da      	lsrs	r2, r3
 8000bdc:	1e13      	subs	r3, r2, #0
 8000bde:	d000      	beq.n	8000be2 <HAL_GPIO_Init+0x2c6>
 8000be0:	e6a4      	b.n	800092c <HAL_GPIO_Init+0x10>
  }
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b006      	add	sp, #24
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	50000400 	.word	0x50000400
 8000bf4:	50000800 	.word	0x50000800
 8000bf8:	50000c00 	.word	0x50000c00
 8000bfc:	50001400 	.word	0x50001400

08000c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	000a      	movs	r2, r1
 8000c0a:	1cbb      	adds	r3, r7, #2
 8000c0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	1cba      	adds	r2, r7, #2
 8000c14:	8812      	ldrh	r2, [r2, #0]
 8000c16:	4013      	ands	r3, r2
 8000c18:	d004      	beq.n	8000c24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e003      	b.n	8000c2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	0008      	movs	r0, r1
 8000c44:	0011      	movs	r1, r2
 8000c46:	1cbb      	adds	r3, r7, #2
 8000c48:	1c02      	adds	r2, r0, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
 8000c4c:	1c7b      	adds	r3, r7, #1
 8000c4e:	1c0a      	adds	r2, r1, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c52:	1c7b      	adds	r3, r7, #1
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c5a:	1cbb      	adds	r3, r7, #2
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c62:	e003      	b.n	8000c6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c64:	1cbb      	adds	r3, r7, #2
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1dbb      	adds	r3, r7, #6
 8000c7e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	1dba      	adds	r2, r7, #6
 8000c86:	8812      	ldrh	r2, [r2, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	d008      	beq.n	8000c9e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000c8e:	1dba      	adds	r2, r7, #6
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 f815 	bl	8000cc8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	1dba      	adds	r2, r7, #6
 8000ca4:	8812      	ldrh	r2, [r2, #0]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d008      	beq.n	8000cbc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cac:	1dba      	adds	r2, r7, #6
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000cb2:	1dbb      	adds	r3, r7, #6
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fab2 	bl	8000220 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021800 	.word	0x40021800

08000cc8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e1d0      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d100      	bne.n	8000cfa <HAL_RCC_OscConfig+0x1e>
 8000cf8:	e069      	b.n	8000dce <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cfa:	4bc8      	ldr	r3, [pc, #800]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2238      	movs	r2, #56	; 0x38
 8000d00:	4013      	ands	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d105      	bne.n	8000d16 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d15d      	bne.n	8000dce <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e1bc      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d107      	bne.n	8000d32 <HAL_RCC_OscConfig+0x56>
 8000d22:	4bbe      	ldr	r3, [pc, #760]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4bbd      	ldr	r3, [pc, #756]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0249      	lsls	r1, r1, #9
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e020      	b.n	8000d74 <HAL_RCC_OscConfig+0x98>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	23a0      	movs	r3, #160	; 0xa0
 8000d38:	02db      	lsls	r3, r3, #11
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d10e      	bne.n	8000d5c <HAL_RCC_OscConfig+0x80>
 8000d3e:	4bb7      	ldr	r3, [pc, #732]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4bb6      	ldr	r3, [pc, #728]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	02c9      	lsls	r1, r1, #11
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4bb3      	ldr	r3, [pc, #716]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4bb2      	ldr	r3, [pc, #712]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e00b      	b.n	8000d74 <HAL_RCC_OscConfig+0x98>
 8000d5c:	4baf      	ldr	r3, [pc, #700]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4bae      	ldr	r3, [pc, #696]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d62:	49af      	ldr	r1, [pc, #700]	; (8001020 <HAL_RCC_OscConfig+0x344>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	4bac      	ldr	r3, [pc, #688]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4bab      	ldr	r3, [pc, #684]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d6e:	49ad      	ldr	r1, [pc, #692]	; (8001024 <HAL_RCC_OscConfig+0x348>)
 8000d70:	400a      	ands	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d014      	beq.n	8000da6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fcc2 	bl	8000704 <HAL_GetTick>
 8000d80:	0003      	movs	r3, r0
 8000d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000d86:	f7ff fcbd 	bl	8000704 <HAL_GetTick>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	; 0x64
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e17b      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d98:	4ba0      	ldr	r3, [pc, #640]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	4013      	ands	r3, r2
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0xaa>
 8000da4:	e013      	b.n	8000dce <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da6:	f7ff fcad 	bl	8000704 <HAL_GetTick>
 8000daa:	0003      	movs	r3, r0
 8000dac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fca8 	bl	8000704 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	; 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e166      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dc2:	4b96      	ldr	r3, [pc, #600]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1f0      	bne.n	8000db0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0xfe>
 8000dd8:	e086      	b.n	8000ee8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dda:	4b90      	ldr	r3, [pc, #576]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2238      	movs	r2, #56	; 0x38
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d12f      	bne.n	8000e4a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e14c      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df6:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a8b      	ldr	r2, [pc, #556]	; (8001028 <HAL_RCC_OscConfig+0x34c>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	0019      	movs	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	021a      	lsls	r2, r3, #8
 8000e06:	4b85      	ldr	r3, [pc, #532]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d112      	bne.n	8000e38 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e12:	4b82      	ldr	r3, [pc, #520]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a85      	ldr	r2, [pc, #532]	; (800102c <HAL_RCC_OscConfig+0x350>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	4b7e      	ldr	r3, [pc, #504]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e26:	4b7d      	ldr	r3, [pc, #500]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	0adb      	lsrs	r3, r3, #11
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	4013      	ands	r3, r2
 8000e30:	4a7f      	ldr	r2, [pc, #508]	; (8001030 <HAL_RCC_OscConfig+0x354>)
 8000e32:	40da      	lsrs	r2, r3
 8000e34:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x358>)
 8000e36:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e38:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <HAL_RCC_OscConfig+0x35c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fc05 	bl	800064c <HAL_InitTick>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d050      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e122      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d030      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a75      	ldr	r2, [pc, #468]	; (800102c <HAL_RCC_OscConfig+0x350>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	4b6e      	ldr	r3, [pc, #440]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000e66:	4b6d      	ldr	r3, [pc, #436]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b6c      	ldr	r3, [pc, #432]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc46 	bl	8000704 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000e7e:	f7ff fc41 	bl	8000704 <HAL_GetTick>
 8000e82:	0002      	movs	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e0ff      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e90:	4b62      	ldr	r3, [pc, #392]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a61      	ldr	r2, [pc, #388]	; (8001028 <HAL_RCC_OscConfig+0x34c>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	021a      	lsls	r2, r3, #8
 8000eac:	4b5b      	ldr	r3, [pc, #364]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	e019      	b.n	8000ee8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000eb4:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b58      	ldr	r3, [pc, #352]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000eba:	4960      	ldr	r1, [pc, #384]	; (800103c <HAL_RCC_OscConfig+0x360>)
 8000ebc:	400a      	ands	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc20 	bl	8000704 <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fc1b 	bl	8000704 <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e0d9      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000edc:	4b4f      	ldr	r3, [pc, #316]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d1f0      	bne.n	8000eca <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2208      	movs	r2, #8
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d042      	beq.n	8000f78 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2238      	movs	r2, #56	; 0x38
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b18      	cmp	r3, #24
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d138      	bne.n	8000f78 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c2      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	4b41      	ldr	r3, [pc, #260]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fbf1 	bl	8000704 <HAL_GetTick>
 8000f22:	0003      	movs	r3, r0
 8000f24:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fbec 	bl	8000704 <HAL_GetTick>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e0aa      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4013      	ands	r3, r2
 8000f42:	d0f1      	beq.n	8000f28 <HAL_RCC_OscConfig+0x24c>
 8000f44:	e018      	b.n	8000f78 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fbd7 	bl	8000704 <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fbd2 	bl	8000704 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e090      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	2202      	movs	r2, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	d1f1      	bne.n	8000f5c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d100      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2a8>
 8000f82:	e084      	b.n	800108e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2238      	movs	r2, #56	; 0x38
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d000      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2c6>
 8000fa0:	e075      	b.n	800108e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e074      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2e0>
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fba:	e01c      	b.n	8000ff6 <HAL_RCC_OscConfig+0x31a>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d10c      	bne.n	8000fde <HAL_RCC_OscConfig+0x302>
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fca:	2104      	movs	r1, #4
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fdc:	e00b      	b.n	8000ff6 <HAL_RCC_OscConfig+0x31a>
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000fec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_RCC_OscConfig+0x340>)
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d028      	beq.n	8001050 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb81 	bl	8000704 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001008:	f7ff fb7c 	bl	8000704 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_RCC_OscConfig+0x364>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d915      	bls.n	8001044 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e039      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
 800101c:	40021000 	.word	0x40021000
 8001020:	fffeffff 	.word	0xfffeffff
 8001024:	fffbffff 	.word	0xfffbffff
 8001028:	ffff80ff 	.word	0xffff80ff
 800102c:	ffffc7ff 	.word	0xffffc7ff
 8001030:	02dc6c00 	.word	0x02dc6c00
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000010 	.word	0x20000010
 800103c:	fffffeff 	.word	0xfffffeff
 8001040:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_RCC_OscConfig+0x3bc>)
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	d0dc      	beq.n	8001008 <HAL_RCC_OscConfig+0x32c>
 800104e:	e013      	b.n	8001078 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fb58 	bl	8000704 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fb53 	bl	8000704 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_RCC_OscConfig+0x3c0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e010      	b.n	8001090 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_RCC_OscConfig+0x3bc>)
 8001070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d105      	bne.n	800108e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_RCC_OscConfig+0x3bc>)
 8001084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_RCC_OscConfig+0x3bc>)
 8001088:	4905      	ldr	r1, [pc, #20]	; (80010a0 <HAL_RCC_OscConfig+0x3c4>)
 800108a:	400a      	ands	r2, r1
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	00001388 	.word	0x00001388
 80010a0:	efffffff 	.word	0xefffffff

080010a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0e9      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2207      	movs	r2, #7
 80010be:	4013      	ands	r3, r2
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d91e      	bls.n	8001104 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2207      	movs	r2, #7
 80010cc:	4393      	bics	r3, r2
 80010ce:	0019      	movs	r1, r3
 80010d0:	4b70      	ldr	r3, [pc, #448]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fb14 	bl	8000704 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e0:	e009      	b.n	80010f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010e2:	f7ff fb0f 	bl	8000704 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_RCC_ClockConfig+0x1f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e0ca      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2207      	movs	r2, #7
 80010fc:	4013      	ands	r3, r2
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1ee      	bne.n	80010e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d017      	beq.n	800113e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2204      	movs	r2, #4
 8001114:	4013      	ands	r3, r2
 8001116:	d008      	beq.n	800112a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001118:	4b60      	ldr	r3, [pc, #384]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a60      	ldr	r2, [pc, #384]	; (80012a0 <HAL_RCC_ClockConfig+0x1fc>)
 800111e:	401a      	ands	r2, r3
 8001120:	4b5e      	ldr	r3, [pc, #376]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 8001122:	21b0      	movs	r1, #176	; 0xb0
 8001124:	0109      	lsls	r1, r1, #4
 8001126:	430a      	orrs	r2, r1
 8001128:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	4a5d      	ldr	r2, [pc, #372]	; (80012a4 <HAL_RCC_ClockConfig+0x200>)
 8001130:	4013      	ands	r3, r2
 8001132:	0019      	movs	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800113a:	430a      	orrs	r2, r1
 800113c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	d055      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001148:	4b54      	ldr	r3, [pc, #336]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	221c      	movs	r2, #28
 800114e:	4393      	bics	r3, r2
 8001150:	0019      	movs	r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d107      	bne.n	8001174 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001164:	4b4d      	ldr	r3, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d11f      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e08b      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4013      	ands	r3, r2
 8001186:	d113      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e07f      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	2202      	movs	r2, #2
 800119a:	4013      	ands	r3, r2
 800119c:	d108      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e074      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 80011a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a6:	2202      	movs	r2, #2
 80011a8:	4013      	ands	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e06d      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2207      	movs	r2, #7
 80011b6:	4393      	bics	r3, r2
 80011b8:	0019      	movs	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011c4:	f7ff fa9e 	bl	8000704 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011cc:	e009      	b.n	80011e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011ce:	f7ff fa99 	bl	8000704 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <HAL_RCC_ClockConfig+0x1f4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e054      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2238      	movs	r2, #56	; 0x38
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1ec      	bne.n	80011ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2207      	movs	r2, #7
 80011fa:	4013      	ands	r3, r2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d21e      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2207      	movs	r2, #7
 8001208:	4393      	bics	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001214:	f7ff fa76 	bl	8000704 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800121c:	e009      	b.n	8001232 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800121e:	f7ff fa71 	bl	8000704 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_RCC_ClockConfig+0x1f4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e02c      	b.n	800128c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_RCC_ClockConfig+0x1f0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2207      	movs	r2, #7
 8001238:	4013      	ands	r3, r2
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2204      	movs	r2, #4
 8001246:	4013      	ands	r3, r2
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <HAL_RCC_ClockConfig+0x204>)
 8001250:	4013      	ands	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800125e:	f000 f82b 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001262:	0001      	movs	r1, r0
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_RCC_ClockConfig+0x1f8>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	220f      	movs	r2, #15
 800126c:	401a      	ands	r2, r3
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_RCC_ClockConfig+0x208>)
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	58d3      	ldr	r3, [r2, r3]
 8001274:	221f      	movs	r2, #31
 8001276:	4013      	ands	r3, r2
 8001278:	000a      	movs	r2, r1
 800127a:	40da      	lsrs	r2, r3
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_RCC_ClockConfig+0x20c>)
 800127e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_RCC_ClockConfig+0x210>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff f9e1 	bl	800064c <HAL_InitTick>
 800128a:	0003      	movs	r3, r0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40022000 	.word	0x40022000
 8001298:	00001388 	.word	0x00001388
 800129c:	40021000 	.word	0x40021000
 80012a0:	ffff84ff 	.word	0xffff84ff
 80012a4:	fffff0ff 	.word	0xfffff0ff
 80012a8:	ffff8fff 	.word	0xffff8fff
 80012ac:	080013a8 	.word	0x080013a8
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	20000010 	.word	0x20000010

080012b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2238      	movs	r2, #56	; 0x38
 80012c4:	4013      	ands	r3, r2
 80012c6:	d10f      	bne.n	80012e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0adb      	lsrs	r3, r3, #11
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	4815      	ldr	r0, [pc, #84]	; (8001334 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012de:	f7fe ff13 	bl	8000108 <__udivsi3>
 80012e2:	0003      	movs	r3, r0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	e01e      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2238      	movs	r2, #56	; 0x38
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d102      	bne.n	80012fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_RCC_GetSysClockFreq+0x7c>)
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2238      	movs	r2, #56	; 0x38
 8001300:	4013      	ands	r3, r2
 8001302:	2b20      	cmp	r3, #32
 8001304:	d103      	bne.n	800130e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	e00b      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_RCC_GetSysClockFreq+0x78>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2238      	movs	r2, #56	; 0x38
 8001314:	4013      	ands	r3, r2
 8001316:	2b18      	cmp	r3, #24
 8001318:	d103      	bne.n	8001322 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800131a:	23fa      	movs	r3, #250	; 0xfa
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	e001      	b.n	8001326 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	02dc6c00 	.word	0x02dc6c00

08001338 <memset>:
 8001338:	0003      	movs	r3, r0
 800133a:	1882      	adds	r2, r0, r2
 800133c:	4293      	cmp	r3, r2
 800133e:	d100      	bne.n	8001342 <memset+0xa>
 8001340:	4770      	bx	lr
 8001342:	7019      	strb	r1, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	e7f9      	b.n	800133c <memset+0x4>

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2600      	movs	r6, #0
 800134c:	4c0c      	ldr	r4, [pc, #48]	; (8001380 <__libc_init_array+0x38>)
 800134e:	4d0d      	ldr	r5, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	2600      	movs	r6, #0
 800135a:	f000 f819 	bl	8001390 <_init>
 800135e:	4c0a      	ldr	r4, [pc, #40]	; (8001388 <__libc_init_array+0x40>)
 8001360:	4d0a      	ldr	r5, [pc, #40]	; (800138c <__libc_init_array+0x44>)
 8001362:	1b64      	subs	r4, r4, r5
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	00b3      	lsls	r3, r6, #2
 800136e:	58eb      	ldr	r3, [r5, r3]
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	00b3      	lsls	r3, r6, #2
 8001378:	58eb      	ldr	r3, [r5, r3]
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080013e8 	.word	0x080013e8
 8001384:	080013e8 	.word	0x080013e8
 8001388:	080013ec 	.word	0x080013ec
 800138c:	080013e8 	.word	0x080013e8

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
